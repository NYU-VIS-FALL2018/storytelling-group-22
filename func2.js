// Leave tract whose record is not found to be gray
undefinedColor = "#ddd";
strokeColor = "#444";

green = "rgb(20, 108, 54)";
yellow = "rgb(244, 209, 102)";
yellowBright = "rgb(244, 222, 148)";
yellowGreen = "rgb(144, 184, 88)";

// Set an array of colors from yellow to green
colorRange = d3.scaleLinear()
    .domain([0, 40, 100])
    .range([yellowBright, yellowGreen, green]);

// generated by http://vrl.cs.brown.edu/color
top10Colors = ["rgb(221,221,221)", "rgb(236,127,106)", "rgb(46,229,45)", "rgb(143,138,197)", "rgb(47,209,146)", "rgb(171,138,119)", "rgb(35,158,179)", "rgb(197,223,114)", "rgb(242,75,199)", "rgb(243,192,17)", "rgb(123,155,71)"];
top10Colors.forEach((color, i, colors) => {
    color = d3.hsl(color);
    color.s *= 0.8;
    colors[i] = color.brighter(0.4);
});


function hideIntro() {
    for (i = 0; i < 10; i++) {
        d = document.getElementById("species" + i);
        d.style.display = "none";
    }
}

function showIntro(index) {
    hideIntro();
    d = document.getElementsByClassName("spc-intro-default")[0].style.display = "none";
    d = document.getElementById("species" + index);
    d.style.display = "block";
    jumpToAnchor("species" + index);
}

function jumpToAnchor(anchor) {
    location = location.toString().replace(/#[A-Za-z0-9_]*$/,'') + "#" + anchor;
}

function mapColor(value, max) {
    return colorRange((value / max) * 100);
}

function total(record) {
    return parseInt(record.Fair) + parseInt(record.Good) + parseInt(record.Poor);
}

function getSpeciesIndex(species, top10Species) {
    if (species === undefined || top10Species.indexOf(species) == -1) {
        return -1;
    }
    return top10Species.indexOf(species);
}

function getSpeciesColor(index) {
    return top10Colors[index + 1];
}